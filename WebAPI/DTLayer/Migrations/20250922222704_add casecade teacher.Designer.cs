// <auto-generated />
using System;
using DTLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922222704_add casecade teacher")]
    partial class addcasecadeteacher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DTLayer.Entities.Courses", b =>
                {
                    b.Property<short>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("courseID"));

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("Date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<short>("itemID")
                        .HasColumnType("smallint");

                    b.Property<byte>("level")
                        .HasColumnType("TINYINT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.HasKey("courseID");

                    b.HasIndex("itemID")
                        .IsUnique();

                    b.ToTable("courses");
                });

            modelBuilder.Entity("DTLayer.Entities.Items", b =>
                {
                    b.Property<short>("itemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("itemID"));

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<short>("specilizeID")
                        .HasColumnType("smallint");

                    b.HasKey("itemID");

                    b.HasIndex("specilizeID");

                    b.ToTable("items");
                });

            modelBuilder.Entity("DTLayer.Entities.People", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<DateOnly>("birth")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("gendor")
                        .HasColumnType("TINYINT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.Property<string>("phone")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("secondName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.HasKey("PersonID");

                    b.ToTable("people");
                });

            modelBuilder.Entity("DTLayer.Entities.Specilzeations", b =>
                {
                    b.Property<short>("specilizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("specilizeId"));

                    b.Property<string>("specilizeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.HasKey("specilizeId");

                    b.ToTable("specilzeations");
                });

            modelBuilder.Entity("DTLayer.Entities.Teachers", b =>
                {
                    b.Property<short>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TeacherID"));

                    b.Property<DateOnly>("hireDate")
                        .HasColumnType("Date");

                    b.Property<int>("personID")
                        .HasColumnType("int");

                    b.Property<short>("specilzeID")
                        .HasColumnType("smallint");

                    b.HasKey("TeacherID");

                    b.HasIndex("personID")
                        .IsUnique();

                    b.HasIndex("specilzeID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DTLayer.Entities.Courses", b =>
                {
                    b.HasOne("DTLayer.Entities.Items", "Items")
                        .WithOne("course")
                        .HasForeignKey("DTLayer.Entities.Courses", "itemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("DTLayer.Entities.Items", b =>
                {
                    b.HasOne("DTLayer.Entities.Specilzeations", "specilize")
                        .WithMany("Items")
                        .HasForeignKey("specilizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("specilize");
                });

            modelBuilder.Entity("DTLayer.Entities.Teachers", b =>
                {
                    b.HasOne("DTLayer.Entities.People", "person")
                        .WithOne("teacher")
                        .HasForeignKey("DTLayer.Entities.Teachers", "personID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTLayer.Entities.Specilzeations", "specilze")
                        .WithMany("Teachers")
                        .HasForeignKey("specilzeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("specilze");
                });

            modelBuilder.Entity("DTLayer.Entities.Items", b =>
                {
                    b.Navigation("course");
                });

            modelBuilder.Entity("DTLayer.Entities.People", b =>
                {
                    b.Navigation("teacher");
                });

            modelBuilder.Entity("DTLayer.Entities.Specilzeations", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
